#!/bin/sh

# full and incremental backup script
# 1st of month backup, incremental every monday
# This will take twice the compressed space on the destination
#TODO do a stat -c%s on the backup file to make sure size is not 0

#******** USER VARIABLES ********#

# Do Monthly backups:
DO_DOM=${DO_DOM:-0}
# Do Weekly incremental backups:
DO_DOW=${DO_DOW:-0}
SCRIPTDIR=${SCRIPTDIR:-/var/tmp/backup_info}
BDFILENAME=full-date
FULLNAME=full
INCRNAME=incr
LOG_ECHO=${LOG_ECHO:-1}
SSH_OPTS=${SSH_OPTS:-}

#******** ARGUMENT VARIABLES ********#
BACKUPUSER=backup
DIRECTORIES=
FORCEFULL=0
FORCEINCR=0
BACKUPDOM="01"
BACKUPNAME=file_backup
BACKUPHOST=
BACKUPDIR=
BACKUPTYPE=ssh
BACKUPDOW="Mon"
BACKUPENCPW=
COMPRESSOPT=
BACKUPEXT=tar
SZ=10G
PAR=

#******** FUNCTIONS ********#
usage() {
	echo "Usage:"
	echo "$0 [options]"
	echo ""
	echo "Where [options] are:"
	echo ""
	echo "Required options:"
	echo "  -d <>. . . Directory list, space separated, abs path"
	echo "  -p <>. . . Directory to put the backups on the destination"
	echo "             (local=<dir>)"
	echo "Required options for remote services:"
	echo "  -o <>. . . Destination Host or service"
	echo "             (ssh=<host>, smb=<host>/<share>)"
	echo ""
	echo "Type, file, authentication, encryption:"
	echo "  -c <>. . . Credentials for backup type, default: 'backup'"
	echo "             (ssh=<username>, smb=username:<smbuseropt>)"
	echo "  -n <>. . . Name of file prefix, default: 'file_backup'"
	echo "  -t <>. . . Type of backup, default: ssh"
	echo "             (ssh, smb, local, localmulti)"
	echo "  -e <>. . . GPG encrypt file with given password"
	echo "             (Currently only supported via ssh)"
	echo "  -z <>. . . Compress tar option, default: 'z'"
	echo "  -l <>. . . Multivolume size option, default: '10G'"
	echo "             (Currently only supported via localmulti)"
	echo "  -r . . . . create par2 files after creating backup files"
	echo "             (Currently only supported via localmulti)"
	echo ""
	echo "Schedule (as output by date %a,%d):"
	echo "  -m <>. . . Day of month to do monthly full backup, default: 01"
	echo "  -w <>. . . Day of week to do weekly incremental backup, default: Mon"
	echo "  -f . . . . Force run a full backup"
	echo "  -i . . . . Force run an incremental backup based on the last full"
	echo ""
	echo "Examples:"
	echo "Example cron file (/etc/cron.daily/$(basename $0)-myserver):"
	echo "  /abs/path/$(basename $0) -o myserver"
	echo "Force incremental of /dir/to/backup to ssh://myserver/media/backup:"
	echo "  $0 -i -d /dir/to/backup -o myserver -p /media/backup"
	echo "Force run a full backup using samba"
	echo "  $0 -t smb -f -c user%pass -d /dir/to/backup -o myserver/share -p rem/backup/dir"
	echo ""
}

log_it() {

	#logger -t "$(basename -- $0)" -s -i -- $1
	#logger -t "$(basename -- $0)" -i -- $1
	if [ ! -z "$LOG_ECHO" ]; then
		echo "$(date '+%Y-%m-%dT%H:%M:%S%z') ($$): $1"
	fi
	echo "$(date '+%Y-%m-%dT%H:%M:%S%z') ($$): $1" >> $LOGNAME 2>&1
}

ssh_type() {

	log_it "Using ssh_type with SSH_OPTS=${SSH_OPTS}"

	######### REMOVE THE OLD WORKING

	log_it "running: rm old working"
	RET=1
	ssh ${SSH_OPTS} -l ${BACKUPUSER} -- ${BACKUPHOST} rm -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working >> $LOGNAME 2>&1
	RET="$?"
	log_it "executed: rm old working RET=$RET"

	#~~~~~~~~~ KLUDGE UNTIL MORE DISK SPACE, REMOVE THE OLD BACKUP TOO
	#ssh ${SSH_OPTS} -l ${BACKUPUSER} -- ${BACKUPHOST} rm -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
	#log_it "executed: rm orig"
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	######### TAR IT UP

	log_it "running: tar with $NEWER and $FROMDATE on $DIRECTORIES"
	RET=1
	# TODO putting an empty "$FROMDATE" will cause one harmless "tar: : No such file or directory" message
	nice tar $NEWER "$FROMDATE" -c $COMPRESSOPT -f - $DIRECTORIES 2>> $LOGNAME | ssh ${SSH_OPTS} -l ${BACKUPUSER} -- ${BACKUPHOST} "( cat > $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working )" >> $LOGNAME 2>&1
	RET="$?"
	log_it "executed: tar with RET=$RET"

	######### MOVE TO KEEP IF EVERYTHING WENT GOOD

	if [ "$RET" = "0" ]; then
		ssh ${SSH_OPTS} -l ${BACKUPUSER} -- ${BACKUPHOST} mv -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
		echo "$BD" > "$ADDTOBDFILENAME" #this only adds if not dev null
		log_it "executed: mv working to main for $BD in $ADDTOBDFILENAME"

		## Encrypt if requested
		if [ ! -z "$BACKUPENCPW" ]; then
			log_it "gpg encrypting"
			# Encrypt if requested
			ssh ${SSH_OPTS} -l ${BACKUPUSER} -- ${BACKUPHOST} gpg --yes --batch --no-use-agent --passphrase=$BACKUPENCPW -c $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
			RET="$?"
			if [ "$RET" = "0" ]; then
				ssh ${SSH_OPTS} -l ${BACKUPUSER} -- ${BACKUPHOST} rm -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
			fi
			log_it "encrypted"
		fi
	fi
}

smb_type() {

	TMPMOUNTPOINT=/mnt

	######### MOUNT
	mount -t cifs -o username=${BACKUPUSER} //${BACKUPHOST} $TMPMOUNTPOINT
	RET="$?"
	log_it "executed: mount with RET=$RET"
	if [ "$RET" = "0" ]; then

		######### REMOVE THE OLD WORKING

		rm -f $TMPMOUNTPOINT/$BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working >> $LOGNAME 2>&1
		log_it "executed: rm old working"

		#~~~~~~~~~ KLUDGE UNTIL MORE DISK SPACE, REMOVE THE OLD BACKUP TOO
		#rm -f $TMPMOUNTPOINT/$BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
		#log_it "executed: rm orig"
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		######### TAR IT UP

		log_it "running: tar with $NEWER and $FROMDATE on $DIRECTORIES"
		RET=1
		nice tar $NEWER "$FROMDATE" -c $COMPRESSOPT -f ${TMPMOUNTPOINT}/$BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working $DIRECTORIES >> $LOGNAME 2>&1
		RET="$?"
		log_it "executed: tar with RET=$RET"

		######### MOVE TO KEEP IF EVERYTHING WENT GOOD

		if [ "$RET" = "0" ]; then
			mv -f $TMPMOUNTPOINT/$BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working $TMPMOUNTPOINT/$BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
			echo "$BD" > "$ADDTOBDFILENAME" #this only adds if not dev null
			log_it "executed: mv working to main"
		fi

		######### UMOUNT
		umount $TMPMOUNTPOINT
	fi
}

local_type() {

	######### REMOVE THE OLD WORKING

	rm -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working >> $LOGNAME 2>&1
	log_it "executed: rm old working"

	#~~~~~~~~~ KLUDGE UNTIL MORE DISK SPACE, REMOVE THE OLD BACKUP TOO
	#rm -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
	#log_it "executed: rm orig"
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	######### TAR IT UP

	log_it "running: tar with $NEWER and $FROMDATE on $DIRECTORIES"
	RET=1

	nice tar $NEWER "$FROMDATE" -c $COMPRESSOPT -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working $DIRECTORIES >> $LOGNAME 2>&1
	RET="$?"
	log_it "executed: tar with RET=$RET"

	######### MOVE TO KEEP IF EVERYTHING WENT GOOD

	if [ "$RET" = "0" ]; then
		mv -f $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT.working $BACKUPDIR/$BACKUPNAME-$TYPENAME.$BACKUPEXT >> $LOGNAME 2>&1
		echo "$BD" > "$ADDTOBDFILENAME" #this only adds if not dev null
		log_it "executed: mv working to main"
	fi
}

localmulti_type() {

	######### REMOVE THE OLD FILES - DOES NOT SUPPORT WORKING STAGE

	rm -f $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT >> $LOGNAME 2>&1
	rm -f $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT-* >> $LOGNAME 2>&1
	if [ "$PAR" = "1" ]; then
		rm -f $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT.par2 >> $LOGNAME 2>&1
		rm -f $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT.*.par2 >> $LOGNAME 2>&1
	else
		rm -f $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT.md5 >> $LOGNAME 2>&1
	fi
	log_it "executed: rm orig"

	######### TAR IT UP

	# Tar info script to generate volume names
	# Note: bash is used since possible TAR_FD > 9
	VOLSCRIPT='
		export VOL=$(printf "%s-%03d" ${TAR_ARCHIVE%-*} $TAR_VOLUME)
		echo TAR_SUBCOMMAND=$TAR_SUBCOMMAND TAR_ARCHIVE=$TAR_ARCHIVE TAR_VOLUME=$TAR_VOLUME TAR_FD=$TAR_FD VOL=$VOL
		case $TAR_SUBCOMMAND in
			-c) ;;
			-d|-x|-t) test -r $VOL || exit 1 ;;
			*) exit 1
		esac
		bash -c "echo $VOL >&$TAR_FD"
	'

	log_it "running: tar with $SZ on $DIRECTORIES"
	RET=1

	nice tar -cML $SZ -F "$VOLSCRIPT" -f $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT $DIRECTORIES >> $LOGNAME 2>&1
	RET="$?"
	log_it "executed: tar with RET=$RET"

	######### FOLLOW WITH PAR2 OR MD5 IF EVERYTHING WENT GOOD AND REQUESTED

	if [ "$RET" = "0" ]; then
		if [ "$PAR" = "1" ]; then
			par2 create $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT-* >> $LOGNAME 2>&1
			log_it "executed: par2"
		else
			md5sum $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT | sed -r "s/ .*\/(.+)/  \1/g" > $BACKUPDIR/$BACKUPNAME.multi.$BACKUPEXT.md5
			log_it "executed: md5sum"
		fi
	fi
}

#******** MAIN ********#

PATH=/usr/local/bin:/usr/bin:/bin:$PATH

######### PARSE AND CHECK REQUIRED ARGS

while getopts "c:d:e:fil:m:n:o:p:rt:w:z:" flag; do
	case $flag in
		[c])
			BACKUPUSER="$OPTARG"
			;;
		[d])
			DIRECTORIES="$OPTARG"
			;;
		[e])
			BACKUPENCPW="$OPTARG"
			;;
		[f])
			FORCEFULL=1
			;;
		[i])
			FORCEINCR=1
			;;
		[l])
			SZ="$OPTARG"
			;;
		[m])
			BACKUPDOM="$OPTARG"
			;;
		[n])
			BACKUPNAME="$OPTARG"
			;;
		[o])
			BACKUPHOST="$OPTARG"
			;;
		[p])
			BACKUPDIR="$OPTARG"
			;;
		[r])
			PAR=1
			;;
		[t])
			BACKUPTYPE="$OPTARG"
			;;
		[w])
			BACKUPDOW="$OPTARG"
			;;
		[z])
			COMPRESSOPT=-"$OPTARG"
			;;
		*)
			echo "Unexpected Argument"
			usage
			exit 1
			;;
	esac
done

if [ -z "$DIRECTORIES" ] || [ -z "$BACKUPDIR" ]; then
	echo "Required arguments not found DIRECTORIES=$DIRECTORIES BACKUPDIR=$BACKUPDIR"
	usage
	exit 1
fi
if [ -z "$BACKUPHOST" ] && [ "$BACKUPTYPE" != "local" ] && [ "$BACKUPTYPE" != "localmulti" ]; then
	echo "Required arguments not found BACKUPTYPE=$BACKUPTYPE BACKUPHOST=$BACKUPHOST"
	usage
	exit 1
fi

######### GENERATED MAIN VARIABLES

TYPENAME=
NEWER=""
FROMDATE=
LOGNAME="$SCRIPTDIR/$BACKUPNAME.log"
ADDTOBDFILENAME="/dev/null"
DOW=`date +%a` # Day of the week e.g. Mon
DOM=`date +%d` # Date of the Month e.g. 27
BD="$(date '+%Y-%m-%d %H:%M:%S')" #Date in day-Month format for the date file and tar newer
if [ "$COMPRESSOPT" = "-z" ]; then
	BACKUPEXT=tgz
fi

######### CREATE THE BACKUP INFO DIR

mkdir -p $SCRIPTDIR
if [ ! -z "$LOG_ECHO" ]; then
	echo "Additional logging to $LOGNAME"
fi
log_it "#########################"
log_it "STARTING $0"

######### FIGURE OUT WHAT TYPE OF BACKUP

# if $FORCEFULL or its the first of the month, do this kind.  Flag must be set above.
if ( [ "$DOM" = "$BACKUPDOM" ] && [ "$DO_DOM" = "1" ] ) || [ "$FORCEFULL" = "1" ]; then
	# THIS IS THE FULL BACKUP
	TYPENAME=$FULLNAME
	ADDTOBDFILENAME="$SCRIPTDIR/$BACKUPNAME-$BDFILENAME"
	FROMDATE=

# if $FORCEINCR or its a monday, do this kind.  Flag must be set above.
elif ( [ $DOW = "$BACKUPDOW" ] && [ "$DO_DOW" = "1" ] ) || [ "$FORCEINCR" = "1" ]; then
	# THIS IS THE INCREMENTAL BACKUP
	TYPENAME=$INCRNAME
	TEMPFROMDATE="$(cat $SCRIPTDIR/$BACKUPNAME-$BDFILENAME)"
	if [ "$TEMPFROMDATE" != "" ]; then
		FROMDATE="$TEMPFROMDATE"
		NEWER="--newer"
	fi
fi

######### EXIT IF WE ARENT DOING A BACKUP TODAY

if [ "$TYPENAME" = "" ] && [ "$BACKUPTYPE" != "localmulti" ]; then
	log_it "Backup ran with no TYPENAME, exiting."
	exit 0
fi

######### START THE BACKUP

log_it "Running for BACKUPUSER=${BACKUPUSER} BACKUPHOST=${BACKUPHOST} BACKUPDIR=${BACKUPDIR} BACKUPNAME=${BACKUPNAME} TYPENAME=${TYPENAME} BACKUPTYPE=${BACKUPTYPE} BACKUPDOM=${BACKUPDOM} BACKUPDOW=${BACKUPDOW} COMPRESSOPT=${COMPRESSOPT} BACKUPEXT=${BACKUPEXT}"

if [ "$BACKUPTYPE" = "ssh" ]; then
	ssh_type
fi

if [ "$BACKUPTYPE" = "smb" ]; then
	smb_type
fi

if [ "$BACKUPTYPE" = "local" ]; then
	local_type
fi

if [ "$BACKUPTYPE" = "localmulti" ]; then
	localmulti_type
fi

######### COMPLETE

log_it "completed, exiting."
exit 0

